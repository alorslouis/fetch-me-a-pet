/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as IndexImport } from "./routes/index"
import { Route as MatchesMatchIdImport } from "./routes/matches/$matchId"
import { Route as DogsDogIdImport } from "./routes/dogs/$dogId"
import { Route as DogsBreedsBreedImport } from "./routes/dogs/breeds/$breed"

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any)

const MatchesMatchIdRoute = MatchesMatchIdImport.update({
  path: "/matches/$matchId",
  getParentRoute: () => rootRoute,
} as any)

const DogsDogIdRoute = DogsDogIdImport.update({
  path: "/dogs/$dogId",
  getParentRoute: () => rootRoute,
} as any)

const DogsBreedsBreedRoute = DogsBreedsBreedImport.update({
  path: "/dogs/breeds/$breed",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/dogs/$dogId": {
      id: "/dogs/$dogId"
      path: "/dogs/$dogId"
      fullPath: "/dogs/$dogId"
      preLoaderRoute: typeof DogsDogIdImport
      parentRoute: typeof rootRoute
    }
    "/matches/$matchId": {
      id: "/matches/$matchId"
      path: "/matches/$matchId"
      fullPath: "/matches/$matchId"
      preLoaderRoute: typeof MatchesMatchIdImport
      parentRoute: typeof rootRoute
    }
    "/dogs/breeds/$breed": {
      id: "/dogs/breeds/$breed"
      path: "/dogs/breeds/$breed"
      fullPath: "/dogs/breeds/$breed"
      preLoaderRoute: typeof DogsBreedsBreedImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/dogs/$dogId": typeof DogsDogIdRoute
  "/matches/$matchId": typeof MatchesMatchIdRoute
  "/dogs/breeds/$breed": typeof DogsBreedsBreedRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/dogs/$dogId": typeof DogsDogIdRoute
  "/matches/$matchId": typeof MatchesMatchIdRoute
  "/dogs/breeds/$breed": typeof DogsBreedsBreedRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexRoute
  "/dogs/$dogId": typeof DogsDogIdRoute
  "/matches/$matchId": typeof MatchesMatchIdRoute
  "/dogs/breeds/$breed": typeof DogsBreedsBreedRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/dogs/$dogId" | "/matches/$matchId" | "/dogs/breeds/$breed"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/dogs/$dogId" | "/matches/$matchId" | "/dogs/breeds/$breed"
  id:
    | "__root__"
    | "/"
    | "/dogs/$dogId"
    | "/matches/$matchId"
    | "/dogs/breeds/$breed"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DogsDogIdRoute: typeof DogsDogIdRoute
  MatchesMatchIdRoute: typeof MatchesMatchIdRoute
  DogsBreedsBreedRoute: typeof DogsBreedsBreedRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DogsDogIdRoute: DogsDogIdRoute,
  MatchesMatchIdRoute: MatchesMatchIdRoute,
  DogsBreedsBreedRoute: DogsBreedsBreedRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dogs/$dogId",
        "/matches/$matchId",
        "/dogs/breeds/$breed"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dogs/$dogId": {
      "filePath": "dogs/$dogId.tsx"
    },
    "/matches/$matchId": {
      "filePath": "matches/$matchId.tsx"
    },
    "/dogs/breeds/$breed": {
      "filePath": "dogs/breeds/$breed.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
