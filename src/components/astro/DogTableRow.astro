---
import { type Dog } from "@typedef/apiTypes";
import { Image } from "astro:assets";

interface Props {
	dog: Dog;
}

const { dog } = Astro.props;

if (!dog) throw new Error(`failed fetching dog`);

const { img, id, ...dogObject } = dog;

const dogIdUrl = new URL(Astro.url);

dogIdUrl.pathname = `/dogs/${dog.id}`;

const breedUrl = new URL(Astro.url);
breedUrl.pathname = `/dogs/breeds/${dog.breed}`;
//
//console.log(dogIdUrl.href);
---

<tr class="py-2 group-hover:opacity-60 hover:!opacity-100">
	<td class="p-0">
		<div class="flex shrink">
			<Image
				src={img}
				alt={`picture of ${dogObject.name}, a ${dogObject.breed}`}
				width={100}
				height={50}
				class="rounded-lg my-2 mx-auto"
			/>
		</div>
	</td>
	{
		Object.entries(dogObject).map(([key, dogObjectVal]) => (
			<td class="text-center">
				<a
					href={
						key === "breed"
							? breedUrl.href
							: dogIdUrl.href
					}
				>
					{dogObjectVal}
				</a>
			</td>
		))
	}
	<td>
		<favorite-button data-dog={JSON.stringify(dog)}>
			<button
				id="favoriteButton"
				class="opacity-20 ml-auto mx-4 fill-none hover:text-red-500 hover:opacity-100 cursor-pointer"
			>
				<svg
					width="20"
					height="20"
					viewBox="0 0 15 15"
					fill="none"
					xmlns="http://www.w3.org/2000/svg"
				>
					<path
						d="M1.35248 4.90532C1.35248 2.94498 2.936 1.35248 4.89346 1.35248C6.25769 1.35248 6.86058 1.92336 7.50002 2.93545C8.13946 1.92336 8.74235 1.35248 10.1066 1.35248C12.064 1.35248 13.6476 2.94498 13.6476 4.90532C13.6476 6.74041 12.6013 8.50508 11.4008 9.96927C10.2636 11.3562 8.92194 12.5508 8.00601 13.3664C7.94645 13.4194 7.88869 13.4709 7.83291 13.5206C7.64324 13.6899 7.3568 13.6899 7.16713 13.5206C7.11135 13.4709 7.05359 13.4194 6.99403 13.3664C6.0781 12.5508 4.73641 11.3562 3.59926 9.96927C2.39872 8.50508 1.35248 6.74041 1.35248 4.90532Z"
						stroke="currentColor"
						stroke-width="1"
						stroke-linecap="round"
						stroke-linejoin="round"></path>
				</svg>
			</button>
		</favorite-button>
	</td>
</tr>

<script>
	import { $dogFavorites } from "@stores/favorites";
	import { dogParser } from "@typedef/apiTypes";
	import { listenKeys } from "nanostores";

	class FavoriteButton extends HTMLElement {
		constructor() {
			super();
			const button = this.querySelector("button");

			let dog = this.dataset.dog;

			if (dog && button) {
				const parsedDog = dogParser.parse(
					JSON.parse(dog),
				);

				listenKeys(
					$dogFavorites,
					[parsedDog.id],
					(value) => {
						const dogValue =
							value[parsedDog.id];

						if (dogValue === null) {
							console.log(
								`Dog ${parsedDog.id} was removed`,
							);
							button?.classList.remove(
								"text-red-500",
							);
							button?.classList.remove(
								"!opacity-100",
							);
						} else if (dogValue) {
							console.log(
								`Dog ${parsedDog.id} added to Map: ${JSON.stringify(dogValue)}`,
							);
							button?.classList.add(
								"text-red-500",
							);
							button?.classList.add(
								"!opacity-100",
							);
						}
					},
				);

				button?.addEventListener("click", () => {
					console.log(`clicked - ${parsedDog}`);
					const dogRecord =
						$dogFavorites.get()[
							parsedDog.id
						];

					dogRecord
						? $dogFavorites.setKey(
								parsedDog.id,
								null,
							)
						: $dogFavorites.setKey(
								parsedDog.id,
								parsedDog,
							);
				});
			}
		}
	}
	customElements.define("favorite-button", FavoriteButton);
</script>
